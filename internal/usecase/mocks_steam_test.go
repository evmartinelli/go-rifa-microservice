// Code generated by MockGen. DO NOT EDIT.
// Source: steam_interfaces.go

// Package usecase_test is a generated GoMock package.
package usecase_test

import (
	context "context"
	reflect "reflect"

	entity "github.com/evmartinelli/go-rifa-microservice/internal/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockSteam is a mock of Steam interface.
type MockSteam struct {
	ctrl     *gomock.Controller
	recorder *MockSteamMockRecorder
}

// MockSteamMockRecorder is the mock recorder for MockSteam.
type MockSteamMockRecorder struct {
	mock *MockSteam
}

// NewMockSteam creates a new mock instance.
func NewMockSteam(ctrl *gomock.Controller) *MockSteam {
	mock := &MockSteam{ctrl: ctrl}
	mock.recorder = &MockSteamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSteam) EXPECT() *MockSteamMockRecorder {
	return m.recorder
}

// GetPlayerInventory mocks base method.
func (m *MockSteam) GetPlayerInventory(arg0 context.Context, arg1 string) (entity.Skin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlayerInventory", arg0, arg1)
	ret0, _ := ret[0].(entity.Skin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlayerInventory indicates an expected call of GetPlayerInventory.
func (mr *MockSteamMockRecorder) GetPlayerInventory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayerInventory", reflect.TypeOf((*MockSteam)(nil).GetPlayerInventory), arg0, arg1)
}

// MockSteamWebApi is a mock of SteamWebApi interface.
type MockSteamWebApi struct {
	ctrl     *gomock.Controller
	recorder *MockSteamWebApiMockRecorder
}

// MockSteamWebApiMockRecorder is the mock recorder for MockSteamWebApi.
type MockSteamWebApiMockRecorder struct {
	mock *MockSteamWebApi
}

// NewMockSteamWebApi creates a new mock instance.
func NewMockSteamWebApi(ctrl *gomock.Controller) *MockSteamWebApi {
	mock := &MockSteamWebApi{ctrl: ctrl}
	mock.recorder = &MockSteamWebApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSteamWebApi) EXPECT() *MockSteamWebApiMockRecorder {
	return m.recorder
}

// PlayerItens mocks base method.
func (m *MockSteamWebApi) PlayerItens(arg0 string) (entity.Skin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlayerItens", arg0)
	ret0, _ := ret[0].(entity.Skin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PlayerItens indicates an expected call of PlayerItens.
func (mr *MockSteamWebApiMockRecorder) PlayerItens(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlayerItens", reflect.TypeOf((*MockSteamWebApi)(nil).PlayerItens), arg0)
}
